apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nextcloud
  namespace: nextcloud
spec:
  interval: 15m
  chart:
    spec:
      chart: nextcloud
      version: 33.0.0
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
      interval: 15m
  timeout: 20m
  maxHistory: 3
  driftDetection:
    mode: warn
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      stopAll: false
    TZ: America/Chicago
    credentials:
      s3:
        type: s3
        url: "${S3URL}"
        bucket: "${S3PREFIX}-cloud"
        accessKey: "${S3ID}"
        secretKey: "${S3KEY}"
        encrKey: "${S3KEY}"
    ingress:
      main:
        enabled: true
        ingressClassName: external
        hosts:
          - host: nextcloud.${DOMAIN_1}
            paths:
            - path: /
              pathType: Prefix
        integrations:
          traefik:
            enabled: false
            entrypoints:
              - websecure        
          certManager:
            certificateIssuer: cloudflare
            enabled: true
    persistence:
      config:
        storageClass: ceph-filesystem
        size: 1Gi
        accessModes:
          - ReadWriteMany        
        # volsync:
        #   - name: config
        #     type: restic
        #     credentials: s3
        #     dest:
        #       enabled: true
        #     src:
        #       enabled: true
        #       trigger:
        #         schedule: 0 15 * * *
      html:
        storageClass: ceph-filesystem
        size: 10Gi
        accessModes:
          - ReadWriteMany        
        # volsync:
        #   - name: html
        #     type: restic
        #     credentials: s3
        #     dest:
        #       enabled: true
        #     src:
        #       enabled: true
        #       trigger:
        #         schedule: 0 15 * * *
      data:
        type: nfs
        server: ${TRUENAS_IP}
        path: /mnt/data1/nc_userdata
    cnpg:
      main:
        # mode: recovery
        backups:
          enabled: true
          credentials: s3
          scheduledBackups:
            - name: daily-backup
              schedule: "0 0 15 * * *"
              backupOwnerReference: self
              immediate: true
              suspend: false 
        recovery:
          method: object_store
          credentials: s3
    nextcloud:
      credentials:
        initialAdminPassword: ${NEXTCLOUD_PWD}
        initialAdminUser: ${NEXTCLOUD_USER}
      general:
        accessIP: ${NGINX_EXTERNAL_IP}
        default_phone_region: US
      previews:
        providers:
        - BMP
        - GIF
        - JPEG
        - Krita
        - MarkDown
        - MP3
        - OpenDocument
        - PNG
        - TXT
        - XBitmap        

    # podOptions:
    #     nodeSelector:
    #         kubernetes.io/hostname: "k8s-worker-1"            
    workload:
      main:
        type: Deployment
        strategy: RollingUpdate
        replicas: 2
        podSpec:
          containers:
            main:
              enabled: true
              primary: true
              envFrom:
                - configMapRef:
                    name: nextcloud-config
              probes:
                liveness:
                  enabled: true
                  type: exec
                  command: /healthcheck.sh
                readiness:
                  enabled: true
                  type: exec
                  command: /healthcheck.sh
                startup:
                  enabled: true
                  type: tcp
                  port: "{{ .Values.service.nextcloud.ports.nextcloud.targetPort }}"
      nginx:
        enabled: true
        type: Deployment
        strategy: RollingUpdate
        replicas: 2
        podSpec:
          containers:
            nginx:
              enabled: true
              primary: true
              imageSelector: nginxImage
              probes:
                readiness:
                  enabled: true
                  path: /robots.txt
                  port: "{{ .Values.service.main.ports.main.port }}"
                  httpHeaders:
                    Host: kube.internal.healthcheck
                liveness:
                  enabled: true
                  path: /robots.txt
                  port: "{{ .Values.service.main.ports.main.port }}"
                  httpHeaders:
                    Host: kube.internal.healthcheck
                startup:
                  enabled: true
                  type: tcp
                  port: "{{ .Values.service.main.ports.main.port }}"
